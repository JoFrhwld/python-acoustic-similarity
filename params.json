{"name":"Python-acoustic-similarity","tagline":"Linguistic signal processing in Python","body":"python-acoustic-similarity\r\n==================\r\n\r\nThis package contains functions for converting wav files into auditory and linguistic\r\nrepresentations and calculating distance between them.\r\n\r\nAuditory representations currently supported are mel-frequency cepstrum\r\ncoefficients (MFCCs) and amplitude envelopes.\r\n\r\nDistance metrics currently implemented are dynamic time warping and inverse\r\ncross-correlation.\r\n\r\nInstallation\r\n==================\r\n\r\n1. This package requires numpy and scipy to be installed.  Precompiled \r\nWindows binaries can be found at http://www.lfd.uci.edu/~gohlke/pythonlibs/.\r\nFurther information is available at http://www.scipy.org/install.html\r\n2. Clone the repository or download the zip file.\r\n3.  In the root directory of the repository, enter `python setup.py install`.\r\n\r\nHigher level wrappers\r\n==================\r\n\r\nIn `acousticsim/main.py` there are several wrapper functions for convenience.\r\n\r\nEach of these functions takes keyword arguments corresponding to how auditory\r\nrepresentations should be constructed and what distance function to use.\r\n\r\n**acoustic_similarity_mapping** takes a mapping of paths as its argument.\r\nThis argument should be a list of pairs or triplets of fully specified filenames.\r\nPairs will compute the distance between the two files, and triplets will compute\r\nan AXB style design, where distances are computed between the first element and the second and\r\nbetween the third element and the second.  In this case, the numerical output\r\nwill be a ratio of the third element's distance to the second divided by the\r\nfirst element's distance to the second.  The return value is a dictionary\r\nwith the pairs/triplets as keys, and the numerical output as the values.\r\n\r\n**acoustic_similarity_directories** takes two arguments which are fully specified paths\r\nto two directories.  It then constructs a path mapping of all the files in\r\nthe first directory to all the files in the second directory.  The return\r\nvalue is a single value, which the average distance of all those calculated.\r\n\r\n**analyze_directory** takes a single directory as an argument and creates a\r\npath mapping of all the files compared to all other files. The return value is a dictionary\r\nwith the file pairs as keys, and the numerical output as the values.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}